# Generated from protos/advanced.proto
# DO NOT EDIT: This file is automatically generated by protoc-gen-py-mcp
# Plugin version: protoc-gen-py-mcp

from typing import Optional, List, Dict, Any
from fastmcp import FastMCP
from google.protobuf import json_format

import protos.advanced_pb2

def create_taskservice_server() -> FastMCP:
    """Create an MCP server for TaskService service tools."""
    mcp = FastMCP("TaskService")

    @mcp.tool()
    def create_tasks(task_names: List[str], priorities: List[int], urgent_flags: List[bool], priority_levels: List[int], metadata_list: List[dict]) -> dict:
        """Tool for CreateTasks RPC method."""
        # Parameters:
        #   task_names: List[str]
        #   priorities: List[int]
        #   urgent_flags: List[bool]
        #   priority_levels: List[int]
        #   metadata_list: List[dict]
        
        # Construct request message
        request = protos.advanced_pb2.CreateTasksRequest()
        request.task_names = task_names
        request.priorities = priorities
        request.urgent_flags = urgent_flags
        request.priority_levels = priority_levels
        request.metadata_list = metadata_list
        
        # TODO: Implement actual CreateTasks logic here
        # For now, create an empty response
        response = protos.advanced_pb2.TaskResponse()
        
        # Convert response to dict for MCP
        result = json_format.MessageToDict(response, use_integers_for_enums=True)
        return result
    
    @mcp.tool()
    def update_task(task_id: str, priority: int, fallback_priority: Optional[int] = None) -> dict:
        """Tool for UpdateTask RPC method."""
        # Parameters:
        #   task_id: str
        #   priority: int
        #   fallback_priority: Optional[int]
        
        # Construct request message
        request = protos.advanced_pb2.UpdateTaskRequest()
        request.task_id = task_id
        request.priority = priority
        if fallback_priority is not None:
            request.fallback_priority = fallback_priority
        
        # TODO: Implement actual UpdateTask logic here
        # For now, create an empty response
        response = protos.advanced_pb2.TaskResponse()
        
        # Convert response to dict for MCP
        result = json_format.MessageToDict(response, use_integers_for_enums=True)
        return result
    
    @mcp.tool()
    def update_task_metadata(task_id: str, metadata: dict, backup_metadata: Optional[dict] = None) -> dict:
        """Tool for UpdateTaskMetadata RPC method."""
        # Parameters:
        #   task_id: str
        #   metadata: dict
        #   backup_metadata: Optional[dict]
        
        # Construct request message
        request = protos.advanced_pb2.TaskWithMetadataRequest()
        request.task_id = task_id
        request.metadata = metadata
        if backup_metadata is not None:
            request.backup_metadata = backup_metadata
        
        # TODO: Implement actual UpdateTaskMetadata logic here
        # For now, create an empty response
        response = protos.advanced_pb2.TaskResponse()
        
        # Convert response to dict for MCP
        result = json_format.MessageToDict(response, use_integers_for_enums=True)
        return result
    
    @mcp.tool()
    def set_task_attributes(task_id: str, attributes: Dict[str, str], counters: Dict[str, int], metadata_map: Dict[str, dict]) -> dict:
        """Tool for SetTaskAttributes RPC method."""
        # Parameters:
        #   task_id: str
        #   attributes: Dict[str, str]
        #   counters: Dict[str, int]
        #   metadata_map: Dict[str, dict]
        
        # Construct request message
        request = protos.advanced_pb2.TaskAttributesRequest()
        request.task_id = task_id
        request.attributes = attributes
        request.counters = counters
        request.metadata_map = metadata_map
        
        # TODO: Implement actual SetTaskAttributes logic here
        # For now, create an empty response
        response = protos.advanced_pb2.TaskResponse()
        
        # Convert response to dict for MCP
        result = json_format.MessageToDict(response, use_integers_for_enums=True)
        return result
    
    @mcp.tool()
    def execute_task_action(task_id: str, complete_with_note: Optional[str] = None, mark_complete: Optional[bool] = None, change_priority: Optional[int] = None, update_metadata: Optional[dict] = None, timestamp: Optional[int] = None) -> dict:
        """Tool for ExecuteTaskAction RPC method."""
        # Parameters:
        #   task_id: str
        #   complete_with_note: Optional[str]
        #   mark_complete: Optional[bool]
        #   change_priority: Optional[int]
        #   update_metadata: Optional[dict]
        #   timestamp: Optional[int]
        
        # Construct request message
        request = protos.advanced_pb2.TaskActionRequest()
        # Oneof validation:
        # Only one of [complete_with_note, mark_complete, change_priority, update_metadata] should be provided for oneof 'action'
        
        request.task_id = task_id
        if complete_with_note is not None:
            request.complete_with_note = complete_with_note
        if mark_complete is not None:
            request.mark_complete = mark_complete
        if change_priority is not None:
            request.change_priority = change_priority
        if update_metadata is not None:
            request.update_metadata = update_metadata
        if timestamp is not None:
            request.timestamp = timestamp
        
        # TODO: Implement actual ExecuteTaskAction logic here
        # For now, create an empty response
        response = protos.advanced_pb2.TaskResponse()
        
        # Convert response to dict for MCP
        result = json_format.MessageToDict(response, use_integers_for_enums=True)
        return result
    
    @mcp.tool()
    def query_tasks(required_field: str, optional_string: Optional[str] = None, optional_int: Optional[int] = None, optional_bool: Optional[bool] = None, optional_enum: Optional[int] = None, optional_message: Optional[dict] = None) -> dict:
        """Tool for QueryTasks RPC method."""
        # Parameters:
        #   required_field: str
        #   optional_string: Optional[str]
        #   optional_int: Optional[int]
        #   optional_bool: Optional[bool]
        #   optional_enum: Optional[int]
        #   optional_message: Optional[dict]
        
        # Construct request message
        request = protos.advanced_pb2.OptionalFieldsRequest()
        request.required_field = required_field
        if optional_string is not None:
            request.optional_string = optional_string
        if optional_int is not None:
            request.optional_int = optional_int
        if optional_bool is not None:
            request.optional_bool = optional_bool
        if optional_enum is not None:
            request.optional_enum = optional_enum
        if optional_message is not None:
            request.optional_message = optional_message
        
        # TODO: Implement actual QueryTasks logic here
        # For now, create an empty response
        response = protos.advanced_pb2.TaskListResponse()
        
        # Convert response to dict for MCP
        result = json_format.MessageToDict(response, use_integers_for_enums=True)
        return result
    
    return mcp

